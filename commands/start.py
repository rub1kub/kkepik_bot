# commands/start.py
import sqlite3
import config
from aiogram import types
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import global_schedules
from schedules import group_schedule, teacher_schedule

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationStates(StatesGroup):
    choosing_role = State()
    waiting_name = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç, –∏ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    conn = sqlite3.connect(config.DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            role TEXT,
            name_or_group TEXT
        )
    """)
    cur.execute("SELECT role, name_or_group FROM users WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    conn.close()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    if row:
        role, typed_name = row
        typed_name = (typed_name or "").strip()
        if role == "–Ø —Å—Ç—É–¥–µ–Ω—Ç":
            typed_name = typed_name.upper()
            if global_schedules.last_groups_df is not None and global_schedules.last_groups_date:
                lines = group_schedule.get_schedule_for_group(global_schedules.last_groups_df, typed_name)
                if lines:
                    txt = "\n".join(lines)
                    msg_text = (
                        f"üìÖ –í–∞—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–≥—Ä—É–ø–ø–∞ <b>{typed_name}</b>):\n\n"
                        f"<b>{global_schedules.last_groups_date}</b>\n\n{txt}"
                    )
                    await message.answer(msg_text, parse_mode="HTML")
                else:
                    await message.answer(
                        f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç '{typed_name}', –Ω–æ –±–æ—Ç –Ω–µ –Ω–∞—à—ë–ª –≤–∞—à—É –≥—Ä—É–ø–ø—É –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.\n\n"
                        "–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ —Å–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (/reset)."
                    )
            else:
                await message.answer(
                    "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç, –Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\n"
                    "–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
        elif role == "–Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
            if global_schedules.last_teachers_df is not None and global_schedules.last_teachers_date:
                lines_raw = teacher_schedule.get_schedule_for_teacher(global_schedules.last_teachers_df, typed_name)
                if lines_raw:
                    import re
                    cleaned_lines = []
                    for line in lines_raw:
                        pattern_fio = rf" ‚Äì {re.escape(typed_name)}"
                        cleaned_line = re.sub(pattern_fio, "", line, count=1)
                        cleaned_lines.append(cleaned_line)
                    txt = "\n".join(cleaned_lines)
                    msg_text = (
                        f"üìÖ –í–∞—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å <b>{typed_name}</b>):\n\n"
                        f"<b>{global_schedules.last_teachers_date}</b>\n\n{txt}"
                    )
                    await message.answer(msg_text, parse_mode="HTML")
                else:
                    await message.answer(
                        f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å '{typed_name}', –Ω–æ –±–æ—Ç –Ω–µ –Ω–∞—à—ë–ª –≤–∞—à–µ –§–ò–û –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.\n\n"
                        "–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ —Å–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (/reset)."
                    )
            else:
                await message.answer(
                    "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, –Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\n"
                    "–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
        return

    await message.answer("üëã")
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–Ø —Å—Ç—É–¥–µ–Ω—Ç üéì", callback_data="role_student"),
            InlineKeyboardButton(text="–Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å üë®‚Äçüè´", callback_data="role_teacher")
        ]
    ])
    await message.answer("‚ùî–†–∞—Å—Å—ã–ª–∫–∞ –∫–∞–∫–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?\n–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–µ –∏–ª–∏ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ?", reply_markup=kb)
    await state.set_state(RegistrationStates.choosing_role)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ callback
async def process_role_callback(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data
    if data == "role_student":
        await state.update_data(role="–Ø —Å—Ç—É–¥–µ–Ω—Ç")
        await callback.message.answer("‚úèÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –í–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 103-–î9-1–ò–ù–°).")
        await state.set_state(RegistrationStates.waiting_name)
    elif data == "role_teacher":
        await state.update_data(role="–Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
        await callback.message.answer("‚úèÔ∏è–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –§–∞–º–∏–ª–∏—é –ò.–û. (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò.).")
        await state.set_state(RegistrationStates.waiting_name)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –§–ò–û
async def process_name(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (–Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏–ª–∏ –§–ò–û).")
        return
    name_or_group = message.text.strip()
    data = await state.get_data()
    role = data.get("role", "")
    user_id = message.from_user.id
    conn = sqlite3.connect(config.DB_PATH)
    cur = conn.cursor()
    cur.execute("CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, role TEXT, name_or_group TEXT)")
    cur.execute("INSERT OR REPLACE INTO users (user_id, role, name_or_group) VALUES (?, ?, ?)", (user_id, role, name_or_group))
    conn.commit()
    conn.close()
    if role == "–Ø —Å—Ç—É–¥–µ–Ω—Ç":
        schedule_type = "—Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    else:
        schedule_type = "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    await message.answer(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –í–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å {schedule_type}.\n\n–°–±—Ä–æ—Å: /reset")
    await state.clear()