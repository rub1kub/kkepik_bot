# commands/find.py
from aiogram import types
from schedules import group_schedule, teacher_schedule
import global_schedules
import os
import pandas as pd
import re

def find_schedule_file(date: str, schedule_type: str) -> str | None:
    """
    –ò—â–µ—Ç —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –¥–∞—Ç–µ –∏ —Ç–∏–ø—É (–≥—Ä—É–ø–ø—ã/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏)
    """
    data_dir = "data"
    date_pattern = date.replace(".", "_")
    
    for filename in os.listdir(data_dir):
        if filename.startswith("~$") or filename == ".DS_Store":
            continue
            
        if schedule_type == "groups" and "–ì–†–£–ü–ü–´" in filename:
            if date in filename or date_pattern in filename:
                return os.path.join(data_dir, filename)
        elif schedule_type == "teachers" and "–ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ò" in filename:
            if date in filename or date_pattern in filename:
                return os.path.join(data_dir, filename)
    
    return None

def is_teacher_name(name: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    """
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –§–ò–û: –§–∞–º–∏–ª–∏—è –ò.–ò. –∏–ª–∏ –§–∞–º–∏–ª–∏—è –ò –ò
    pattern = r'^[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å]\.[–ê-–Ø–Å]\.$'
    print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –§–ò–û: '{name}'")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    return bool(re.match(pattern, name))

def is_group_name(name: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–æ–º–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã
    """
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã: 103-–î9-1–ò–ù–°
    pattern = r'^\d{3}-[–ê-–Ø]\d{1,2}-\d[–ê-–Ø]{2,}$'
    name = name.upper()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É: '{name}'")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    return bool(re.match(pattern, name))

async def cmd_find(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä—É –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π.
    """
    # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —á–∞—Å—Ç–∏
    parts = message.text.split()
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {message.text}")
    print(f"–†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏: {parts}")
    
    if len(parts) < 2:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n- –î–ª—è –≥—Ä—É–ø–ø: /find 103-–î9-1–ò–ù–° 17.03.2025\n- –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: /find –ï—Ä–º–æ–ª–æ–≤ –ò.–ê. 17.03.2025")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–æ–º–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã
    first_arg = parts[1].strip()
    if is_group_name(first_arg):
        search_name = first_arg
        search_date = parts[2] if len(parts) > 2 else None
    else:
        # –ï—Å–ª–∏ –Ω–µ –≥—Ä—É–ø–ø–∞ - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –§–ò–û
        if len(parts) < 4:  # /find –§–∞–º–∏–ª–∏—è –ò.–û. –î–∞—Ç–∞
            await message.answer("‚ö†Ô∏è –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n/find –§–∞–º–∏–ª–∏—è –ò.–û. –î–∞—Ç–∞")
            return
        
        search_name = f"{parts[1]} {parts[2]}"  # –§–∞–º–∏–ª–∏—è –ò.–û.
        search_date = parts[3]  # –î–∞—Ç–∞

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"–ü–æ–∏—Å–∫–æ–≤–æ–µ –∏–º—è: '{search_name}'")
    print(f"–î–∞—Ç–∞: '{search_date}'")

    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    if not search_date:
        if global_schedules.last_groups_df is not None:
            search_date = global_schedules.last_groups_date
        elif global_schedules.last_teachers_df is not None:
            search_date = global_schedules.last_teachers_date
        else:
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.")
            return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–≥—Ä—É–ø–ø—ã –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏)
    if is_group_name(search_name):
        schedule_type = "groups"
        search_name = search_name.upper()
    else:
        schedule_type = "teachers"
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –§–ò–û, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if '.' not in search_name:
            parts = search_name.split()
            if len(parts) == 2:
                search_name = f"{parts[0]} {parts[1]}"

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"–¢–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {schedule_type}")
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–º—è: '{search_name}'")

    # –ò—â–µ–º —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedule_file = find_schedule_file(search_date, schedule_type)
    if not schedule_file:
        await message.answer(f"‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {search_date} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(schedule_file, sheet_name=search_date, header=None)
        if 0 in df.columns:
            df[0] = df[0].ffill()

        # –ò—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        if schedule_type == "groups":
            lines = group_schedule.get_schedule_for_group(df, search_name)
            if lines:
                msg_text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {search_name} –Ω–∞ {search_date}:\n\n" + "\n".join(lines)
                await message.answer(msg_text, parse_mode="HTML")
            else:
                await message.answer(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {search_name} –Ω–∞ {search_date}.")
        else:
            lines = teacher_schedule.get_schedule_for_teacher(df, search_name)
            if lines:
                msg_text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {search_name} –Ω–∞ {search_date}:\n\n" + "\n".join(lines)
                await message.answer(msg_text, parse_mode="HTML")
            else:
                await message.answer(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {search_name} –Ω–∞ {search_date}.")

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
