# handlers/upload_schedule.py
import re
import sqlite3
import pandas as pd
from aiogram import types
from aiogram.types.input_file import FSInputFile
from aiogram.client.bot import Bot
import config
import os
import shutil
from schedules import group_schedule, teacher_schedule
import global_schedules  # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å

async def handle_document(message: types.Message, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ XLSX-—Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º).
    –ò–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –¥–∞—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç dd.mm.yyyy –∏–ª–∏ dd_mm_yyyy) –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–¥–ª—è –≥—Ä—É–ø–ø –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π).
    –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """
    import re
    
    user_id = message.from_user.id
    if user_id not in config.ADMINS:
        await message.reply("üö´ –£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
        return

    doc: types.Document = message.document
    file_name = doc.file_name or "file.xlsx"
    if not file_name.endswith(".xlsx"):
        await message.reply("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∞–π–ª .xlsx.")
        return

    file_id = doc.file_id
    try:
        file_info = await bot.get_file(file_id)
        file_path = f"/tmp/{file_name}"
        await bot.download_file(file_info.file_path, file_path)
        os.makedirs("data", exist_ok=True)
        data_file_path = os.path.join("data", file_name)
        shutil.copy(file_path, data_file_path)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    mm = re.search(r"(\d{1,2}\.\d{1,2}\.\d{4})", file_name)
    if not mm:
        mm = re.search(r"(\d{1,2}_\d{1,2}_\d{4})", file_name)
    if mm:
        schedule_date = mm.group(1).replace("_", ".")
    else:
        await message.reply("‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É (dd.mm.yyyy –∏–ª–∏ dd_mm_yyyy) –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞.")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedule_type = None
    if "–ì–†–£–ü–ü–´" in file_name.upper():
        schedule_type = "groups"
    elif "–ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ò" in file_name.upper():
        schedule_type = "teachers"
    if not schedule_type:
        await message.reply("‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
        return

    await message.reply("‚öôÔ∏è –ü—Ä–∏–Ω—è—Ç–æ. –û–±—Ä–∞–±–æ—Ç–∫–∞...")

    try:
        df = pd.read_excel(file_path, sheet_name=schedule_date, header=None)
    except Exception as e:
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ª–∏—Å—Ç '{schedule_date}' –≤ —Ñ–∞–π–ª–µ.\n–û—à–∏–±–∫–∞: {e}")
        return

    if 0 in df.columns:
        df[0] = df[0].ffill()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
    schedule_changed = False
    if schedule_type == "groups":
        if global_schedules.last_groups_date == schedule_date:
            schedule_changed = True
        global_schedules.last_groups_df = df
        global_schedules.last_groups_date = schedule_date
    else:
        if global_schedules.last_teachers_date == schedule_date:
            schedule_changed = True
        global_schedules.last_teachers_df = df
        global_schedules.last_teachers_date = schedule_date

    # –†–∞—Å—Å—ã–ª–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    conn = sqlite3.connect(config.DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT user_id, role, name_or_group FROM users")
    rows = cur.fetchall()
    conn.close()

    success_count = 0
    for (uid, role, namegrp) in rows:
        if schedule_type == "groups" and role == "–Ø —Å—Ç—É–¥–µ–Ω—Ç":
            lines = group_schedule.get_schedule_for_group(df, namegrp.upper())
            if not lines:
                msg_error = f"üîî –ü—Ä–∏—à–ª–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!\n\n–ù–æ –±–æ—Ç –Ω–µ –Ω–∞—à—ë–ª –≥—Ä—É–ø–ø—É '{namegrp}' –≤ —Ç–∞–±–ª–∏—Ü–µ."
                if schedule_changed:
                    msg_error = "‚ÄºÔ∏è –†–ê–°–ü–ò–°–ê–ù–ò–ï –ò–ó–ú–ï–ù–ò–õ–û–°–¨\n\n" + msg_error
                try:
                    await bot.send_message(uid, msg_error)
                    success_count += 1
                except Exception:
                    pass
            else:
                txt = "\n".join(lines)
                msg_text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ <b>{schedule_date}</b>\n\n–ì—Ä—É–ø–ø–∞ <b>{namegrp}</b>:\n\n{txt}"
                if schedule_changed:
                    msg_text = "‚ÄºÔ∏è –†–ê–°–ü–ò–°–ê–ù–ò–ï –ò–ó–ú–ï–ù–ò–õ–û–°–¨\n\n" + msg_text
                try:
                    await bot.send_message(uid, text=msg_text, parse_mode="HTML")
                    success_count += 1
                except Exception:
                    pass
        elif schedule_type == "teachers" and role == "–Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
            lines_raw = teacher_schedule.get_schedule_for_teacher(df, namegrp)
            if not lines_raw:
                msg_error = f"üîî –ü—Ä–∏—à–ª–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!\n\n–ù–æ –±–æ—Ç –Ω–µ –Ω–∞—à—ë–ª –§–ò–û '{namegrp}' –≤ —Ç–∞–±–ª–∏—Ü–µ."
                if schedule_changed:
                    msg_error = "‚ÄºÔ∏è –†–ê–°–ü–ò–°–ê–ù–ò–ï –ò–ó–ú–ï–ù–ò–õ–û–°–¨\n\n" + msg_error
                try:
                    await bot.send_message(uid, msg_error)
                    success_count += 1
                except Exception:
                    pass
            else:
                import re
                cleaned_lines = []
                for line in lines_raw:
                    pattern_fio = rf" ‚Äì {re.escape(namegrp.upper())}"
                    cleaned_line = re.sub(pattern_fio, "", line, count=1)
                    cleaned_lines.append(cleaned_line)
                txt = "\n".join(cleaned_lines)
                msg_text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ <b>{schedule_date}</b>\n\n{txt}"
                if schedule_changed:
                    msg_text = "‚ÄºÔ∏è –†–ê–°–ü–ò–°–ê–ù–ò–ï –ò–ó–ú–ï–ù–ò–õ–û–°–¨\n\n" + msg_text
                try:
                    await bot.send_message(uid, text=msg_text, parse_mode="HTML")
                    success_count += 1
                except Exception:
                    pass

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    msg = f"‚úÖ –ì–æ—Ç–æ–≤–æ. –†–∞—Å—Å—ã–ª–∫–∞: {success_count} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.\n–¢–∏–ø: <b>{schedule_type}</b>, –¥–∞—Ç–∞: <b>{schedule_date}</b>"
    if schedule_changed:
        msg = "‚ÄºÔ∏è –†–ê–°–ü–ò–°–ê–ù–ò–ï –ò–ó–ú–ï–ù–ò–õ–û–°–¨\n\n" + msg
    
    await message.reply(msg, parse_mode="HTML")