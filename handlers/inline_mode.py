# handlers/inline_mode.py
import re
import sqlite3
from aiogram import types
from aiogram.types import InlineQueryResultArticle, InputTextMessageContent
import config
from schedules import group_schedule, teacher_schedule
import global_schedules

async def inline_schedule(inline_query: types.InlineQuery):
    """
    Inline‚Äë—Ä–µ–∂–∏–º: –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä—É –≥—Ä—É–ø–ø—ã –∏–ª–∏ –§–ò–û.
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–≤–µ—Å—Ç–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, "@kkepik_bot 103-–î9-1–ò–ù–°" –∏–ª–∏ "@kkepik_bot –ò–≤–∞–Ω–æ–≤ –ò.–ò.".
    –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ –∏ –¥–∞—Ç–µ.
    """
    query_text = inline_query.query.strip()
    user_id = inline_query.from_user.id

    # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (global_schedules.last_groups_df is None) and (global_schedules.last_teachers_df is None):
        no_data = InlineQueryResultArticle(
            id="no_data",
            title="‚ö†Ô∏è –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π",
            description="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            input_message_content=InputTextMessageContent(message_text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!")
        )
        return await inline_query.answer([no_data], cache_time=1)

    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    if not query_text:
        try:
            conn = sqlite3.connect(config.DB_PATH)
            cur = conn.cursor()
            cur.execute("SELECT role, name_or_group FROM users WHERE user_id = ?", (user_id,))
            row = cur.fetchone()
        except Exception:
            row = None
        finally:
            conn.close()
        if row is None:
            return await inline_query.answer(
                results=[],
                switch_pm_text="–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–ª–∏ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: 103-–î9-1–ò–ù–°)",
                switch_pm_parameter="inline_usage",
                cache_time=1
            )
        else:
            _, typed_name = row
            typed_name = (typed_name or "").strip().upper()
    else:
        typed_name = query_text.upper()

    lines = None
    found_type = None

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
    if global_schedules.last_groups_df is not None:
        g_lines = group_schedule.get_schedule_for_group(global_schedules.last_groups_df, typed_name)
        if g_lines:
            lines = g_lines
            found_type = "group"

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    if not lines and global_schedules.last_teachers_df is not None:
        t_lines = teacher_schedule.get_schedule_for_teacher(global_schedules.last_teachers_df, typed_name)
        if t_lines:
            # –£–±–∏—Ä–∞–µ–º –∏–∑ —Å—Ç—Ä–æ–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –§–ò–û
            cleaned_lines = []
            for line in t_lines:
                pattern_fio = rf" ‚Äì {re.escape(typed_name)}"
                cleaned_line = re.sub(pattern_fio, "", line, count=1)
                cleaned_lines.append(cleaned_line)
            lines = cleaned_lines
            found_type = "teacher"

    if not lines:
        not_found_res = InlineQueryResultArticle(
            id="not_found",
            title="‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            description="(–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)",
            input_message_content=InputTextMessageContent(message_text="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        )
        return await inline_query.answer([not_found_res], cache_time=1)

    if found_type == "group":
        date_str = global_schedules.last_groups_date or "??.??.????"
        header_str = f"üìñ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {typed_name} –Ω–∞ {date_str}"
    else:
        date_str = global_schedules.last_teachers_date or "??.??.????"
        header_str = f"üë®‚Äçüè´ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {typed_name} –Ω–∞ {date_str}"

    schedule_str = "\n".join(lines)
    msg_text = f"<b>{header_str}</b>\n\n{schedule_str}"

    result_article = InlineQueryResultArticle(
        id="found_schedule",
        title=f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {typed_name}",
        description="(–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ)",
        input_message_content=InputTextMessageContent(message_text=msg_text, parse_mode="HTML")
    )

    return await inline_query.answer([result_article], cache_time=1)